/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include

Notes:

	Note that builsall.sh builds all of the openssl/fips files then putss the results in /usr/local/ssl/Release-iphoneos

	Test Programs:
		fips-pi	
			IOS test progrma that links directory (and only) with /usr/local/ssl/Release-iphoneos/libcrypto.a
				Note: libcrypto.a needs to be build sperately with ./bhildAll.sh
				Tests signature and that you can enter fips mode successfully
		

To create ios test program and link to sqlcipher and openssl files
	1. Make regular test IOS program
	IN test program:
	2. 	Drag sqlcipher.xcodeproj to the test program
	2a.		Add sqlcipher to target dependencies in "Build Phases"
	2b.		Expand target/Build Phases/ Link with Binaries, Add libsqlcipher.a
	3. 	In Build Settings add -DSQLITE_HAS_CODEC
	4. Add to header search paths: /usr/local/ssl/Release-iphoneos/include
	  (not user header search paths)
	5. Add to Other linker flags: /usr/local/ssl/Release-iphoneos/libcrypto.a

	6. Add files to the supporting files xcode dir
		fips_assert.c/h, fips-premain.c
	7. Add new run build script phase to taeget (Embed fingerprint)
		/usr/local/bin/incore_macho --debug -exe "$CONFIGURATION_BUILD_DIR/$EXECUTABLE_PATH"


Tools Necessary for Build
=========================
	MAC OS-X
	Xcode 4.x (Note that build will fail with 5.x XCODE, there is a compiler issue!!!!)


Steps:
======
	1. Download files
	2. Build files
	3. Test result

******************
1. Download Files
******************

Retrieve source files
================================


	1a. Clone the T2 fcids project from git:
	----------------------------------------
		git clone git.t2.local:/git/mobile/crossplatform/fcids.git
		cd fcids

		Results: 
		========
			fcids/dev/supplemental
				.. files
			fcids/doc
				.. files

	1b. Obtain fips/opsnssl files copy them to fcads/dev
	-----------------------------------------------------

		Option 1 (the official way):
		----------------------------
			OBtain the official disk and copy $sslFiles, and fipsFiles to the dev directory"

		Option 2:
		--------
  			Copy the files from the local distribution (use command: cp localFipsSslFiles/*.gz ./dev"


		Results: 
		========
			fcids/dev
				openssl-fips-??tar.gz	
				openssl-1.0.1?.tar.gz


	1c. Obtain sqlcipher source files
	---------------------------------

		git clone git.t2.local/git/mobile/crossplatform/sqlcipher.git


	Results: 
	========
		fcads/dev/android-database-sqlcipher
			.. Lots of files and directories (~2.9 Gb)


******************
2. BuildFiles
******************


Building
==========



******************
3. Test on IOS simulator and device
******************


******************
Appendix A - IOS test programs
******************

	1) fips-pi
		Native IOS program that links in crypto library at
			/usr/local/ssl/Release-iphoneos/libcrypto.a (default location for t2 build)
		Presents ui that allows uses to manuall enter/edit fips mode
			User nees to examine log file (in xcode) to make sure there are no errors when switching into and out of fips mode.
	2) testSqlCipher
		Native IOS program that links in crypto library at
			/usr/local/ssl/Release-iphoneos/libcrypto.a (default location for t2 build)	
		Automatically enters fips mode when db is opened
		Meant to be a test bed to experiment with native sqlite commands, ex:
			sqlite3_exec(db, "CREATE TABLE t1(a INTEGER, b INTEGER, c VARCHAR(100));", NULL, NULL, NULL);
		** Doesn't need to be run as part of build test suite
	3) testCordova
		Coirdova program that links in crypto library at
			/usr/local/ssl/Release-iphoneos/libcrypto.a (default location for t2 build)
		Does very basic db insert to verify operation of T2's IOS portion of Cordova-SqlcipherPlugin


