TBD - Add section about downloading files


Using the FCIDS FIPS compliant library in an IOS project:
=====================================================================


	Building a project to integrate sqlcipher with sqliite plugin
	===========================================================
	Tools necessary:
		Cordova 3.5.xxx

	These instructions assume that you previously cloned fcids into directory test1010 (project root directory),
	downloaded files, and successfully run buildAll.sh

	Navigate to your project root directory
		mkdir test1010

	Create the project that you want to add fips storage to:
		cordova create testExample com.t2.testexample testExample
		cd testExample

	Add IOS platform and install plugins:
		cordova platform add ios
		cordova plugin add ssh://scoleman@git.t2.local/git/mobile/crossplatform/cordova-plugin-console.git
		cordova plugin add ssh://scoleman@git.t2.local/git/mobile/crossplatform/Cordova-SqlcipherPlugin.git

	Update your project with the necessary references
		Open xcode project at: test1010/testExample/platforms/ios/testExample.xcodeproj

		Add the subproject references for sqlcipher (using opt-cmd-a)
			test1010/fcids/sqlcipher/sqlcipher.xcodeproj

		Update "Build Phases" of testExample project 
			In add target dependencies, add sqlcipher
			In Link Binary with Libraries:
				Add libsqlcipher.a
				Remove libsqlite3.dylib
				Add Security.framework

		Update "Build Settings" of testExample project
			add -DSQLITE_HAS_CODEC to "other C flags" (Any archetecture, any sdk - both debug and release)
			Add /usr/local/ssl/Release-iphoneos/include to "Header Search Paths" (Any archetecture, any sdk - both debug and release)
			Add /usr/local/ssl/Release-iphoneos/libcrypto.a to "Other Linker Flags" (Any archetecture, any sdk - both debug and release)

		in xcode co clean then build

			To test to see if everything works you can add the following to your index.js
		        var db = window.sqlitePlugin.openDatabase({name: "myencrypt1.db", password: "password233333"}, onOpenSuccess);
		        
		        db.transaction(function (tx) {
		           tx.executeSql("CREATE TABLE IF NOT EXISTS todo(ID INTEGER PRIMARY KEY ASC, todo TEXT, added_on DATETIME)",
		                         [], onSuccess, onError);
		           tx.executeSql("INSERT INTO todo(todo, added_on) VALUES (?,?)", ['my todo item', new Date()], onSuccess, onError);
		           });
		        
		        function onSuccess(transaction, resultSet) {
		            console.log('Query completed: ' + JSON.stringify(resultSet));
		        }
		        
		        function onError(transaction, error) {
		            console.log('Query failed: ' + error.message);
		        }
		        
		        function onOpenSuccess(resultSet) {
		            console.log('Open Successful');
		            console.log('ssss: ' + JSON.stringify(resultSet));
		            
		            var response = JSON.stringify(resultSet);
		            var parsedJSON = eval('('+response+')');
		            
		            console.log("FIPS Status = " + parsedJSON.FIPSStatus);
		            console.log("T2 FIPS Versions = " + parsedJSON.T2FIPSVersion);
		            
		        }   

	
	When application is complete, create the following FIPS documentation files from templates:
		doc/FIPS140-2ApplicationComplianceStatementTemplate.txt
		doc/FIPS140-2ApplicationComplianceRecordTemplate.txt
******************
Appendix A - Plugin control flow
******************
	------------------------------------------------------------------------------
	Control flow example for SQLCipher
	------------------------------------------------------------------------------
	Category      |   File               |   Code
	------------------------------------------------------------------------------
	JavaScript    |   index.js           |   window.sqlitePlugin.openDatabase()
	              |                      |
	Plugin        |   sqlitePlugin.m     |   -(void)open: (CDVInvokedUrlCommand*)command
	              |                      |
	Native Code   |   sqlite.c           |   sqlite3_create_function()


******************
Appendix B - Description of code and plugins used
******************

	sqlcipher:
		Encrypted sqlite database
			t2.local/git/mobile/crossplatform/sqlcipher.git
			https://github.com/sqlcipher/sqlcipher

	Cordova-SqlitePlugin:
		A Cordova plugin to open and use sqlite databases (android/ios) with HTML5 Web SQL
			git.t2.local/git/mobile/crossplatform/Cordova-SqlcipherPlugin.git
			https://github.com/brodysoft/Cordova-SQLitePlugin

	cordova-plugin-console:
		A Cordova plugin to allow console debugging (so NSLog shows up in output window of xcode)
			git.t2.local/git/mobile/crossplatform/cordova-plugin-console.git
			https://github.com/apache/cordova-plugin-console



A note about encryption keys:
------------------------------

When initialized with a passphrase SQLCipher derives the key data using PBKDF2 (OpenSSL’s PKCS5_PBKDF2_HMAC_SHA1). Each database is initialized with a unique random salt in the first 16 bytes of the file. This salt is used for key derivation and it ensures that even if two databases are created using the same password, they will not have the same encryption key. The default configuration uses 64000 iterations for key derivation (this can be changed at runtime using “PRAGMA kdf_iter”).

The key used to calculate page HMACs is different that the encryption key. It is derived from the encryption key and using PBKDF2 with 2 iterations and a variation of the random database salt. 

If use of a passphrase is undesirable, an application may provide raw binary key data (for instance to support vaulted keys, or the use of PKI based key exchange).

