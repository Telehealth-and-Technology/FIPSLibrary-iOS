These instructions are for using the IOS FIPS capable Library 

*************************
Section 1 - Release files
*************************

The directory structure of the fcids release (pre-built) is as follows:
Vx.y.x_DD-DD-YY
	doc               documentation for FIPS compliance
	object
	usr               release binary and header files (see note 1)
	source            Supplemental files and tools used in build (for reference only)
	test              Test IOS applications used to test release
	fips-pi           Tests inclusion of library in a native IOS app
	testcordova       Tests inclusion of library in a cordova plugin using sqlcipher
	t2Crypto	  	File containing RawEncrypt and RawDecrypt - for native apps

Note 1: The release binary and header files are the actual product of the release. They need to be 
        installed in the protected space of the development machine that the developer is using
        The utility installFipsRelease.sh.
        e.g. installs files to /usr/local/ssl/Release-iphoneos


*****************************************************
Section 2 - Verifying successful operation of release
*****************************************************

  --------------------------------------------------
  2A - Verifying/Using release in native IOS project
  --------------------------------------------------
  After you have downloaded the release, run the installFipsRelease.sh script to install the binaries and headers
  in your development machine.

	  --------------------------------------------------
	  2A1 - Use the test project supplied in the release
	  --------------------------------------------------
		  You can test project supplied in the release: test/fips-pi/fips-pi.xcodeproj
		  which has modifications mentioned in 2A2 already made made to it

		  Clean, build and run. Confirm that you can enter and exit fips mode without errors.
		  (observe log files in xcode)
		  eg.
		  Successfully entered FIPS mode
		  Successfully exited FIPS mode

		  Confirm that rawEncrypt() and rawDecrypt() function correctly
		  Confirm encrypted key/value storage functions correctly

	  ----------------------------------------------------------------------------------------------
	  2B1 - Use the test project included in the release which uses sqlcipher and the cordova plugin
	  ----------------------------------------------------------------------------------------------
		  You can test project supplied in the release: test/testcordova/platforms/ios/testcordova.xcodeproj
		  which has modifications mentioned in section 2B2 already made made to it

		  Clean, build and run. Confirm database access proceeded without errors
		  eg.
		  	Open Successful
			FIPS Status = 1
			T2 FIPS Versions = 1.0.0
		  	Query completed: {"rows":{"length":0},"rowsAffected":0}
			Query completed: {"rows":{"length":0},"rowsAffected":1,"insertId":19}


*****************************************************
Section 3 - Incorporating into your own project
*****************************************************

  --------------------------------------------------
  3A - Incorporating into a native IOS project
  --------------------------------------------------
		1.  Update the settings for your project to know about the library:
			add -DSQLITE_HAS_CODEC to "other C flags" and "other c++ flags"  (Any architecture, any sdk - both debug and release) - target
			Add /usr/local/ssl/Release-iphoneos/include to "Header Search Paths" (Any architecture, any sdk - both debug and release) - target
			Add /usr/local/ssl/Release-iphoneos/libcrypto.a to "Other Linker Flags" (Any architecture, any sdk - both debug and release) - target

		2. Copy the following files into your project:
			t2crypto/fips_assert.c
			t2crypto/fips_assert.h
			t2crypto/FIPS_iOS_routines.h
			t2crypto/FIPS_iOS_routines.m
			t2crypto/fips_premain.c
			t2crypto/T2Crypto.h
			t2crypto/T2Crypto.m

			Note:
			If you get errors after including any of the .c files see: 
    			http://stackoverflow.com/questions/5983103/adding-an-empty-c-file-to-xcode-cocoa-project-causes-thousands-of-errors


		3. In your root project under "build phases" add a "run script" Build phase with the following script:
		    	/usr/local/bin/incore_macho --debug -exe "$CONFIGURATION_BUILD_DIR/$EXECUTABLE_PATH"	
		    	name it EmbedFingerprint

		*** Note, if you forget step 3 the app won't launch (Because fips_premain.c requires an embedded fingerprint).

		4. When application is complete, create the following FIPS documentation files from templates:
			doc/FIPS140-2ApplicationComplianceStatementTemplate.txt
			doc/FIPS140-2ApplicationComplianceRecordTemplate.txt


		  Clean, build and run. Confirm that you can enter and exit fips mode without errors.

		  Ex:
		  	#include "T2Crypto.h"
			#include <openssl/crypto.h>
			#include <openssl/err.h>
			#include <openssl/rand.h>
			#include <openssl/aes.h>

		    int mode = 0, ret = 0;
	    
		    mode = FIPS_mode();
		    
		    if(mode == 0)  {
		        ret = FIPS_mode_set(1 /*on*/);
		        if(1 != ret) {
		            NSLog(@"\n  FIPS_mode_set failed");
		        }
		        else {
		            NSLog(@"\n  Successfully entered FIPS mode");
		        }
		    }			

	  ---------------------------------------------------------
	  3A.1 - Incorporating sqlCipher (With support for CoreData)
	  ---------------------------------------------------------
	  	1. Copy files into your project:
	  		t2crypto/EncryptedStore.h
			t2crypto/EncryptedStore.m

	  	2. Clone SqlCipher (git.t2.local:/git/mobile/crossplatform/sqlcipher.git)
	  	3. Add sqlcipher as a sub-project
	  		Easiest way to do this is to drag sqlcipher.xcodeproj to your IDE under your main project
	    3.1 In  Build Phases of your main project:
	    		Under "Target Dependencies" add sqlcipher
	    		Under "Link binary with Libraries: add libsqlcipher.a"


	  	

	  	4. In AppDelegate.m Change the line:    
	  		NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
	  		to:
        	NSPersistentStoreCoordinator *coordinator = [EncryptedStore makeStore:[self managedObjectModel] passcode:@"SOME_PASSWORD"];

		4.1 Add #import "EncryptedStore.h"

        Project should build now with no errors. CoreData storage will be encrypted now


  -------------------------------------------------------------------------------------
  3B - Incorporating into a Cordova project that uses sqlcipher and the cordova plugin
  -------------------------------------------------------------------------------------
		!!! Note: The cordova test application testcordova.xcodeproj uses a canned version sqlcipher contained in the release
		          please make sure that your application does not use this canned version. You must clone a real version from 
		          the repository at t2.local/git/mobile/crossplatform/sqlcipher.git

		Using the FCIDS FIPS compliant library in an IOS project:
		=========================================================

		  After you have downloaded the release, run the installFipsRelease.sh script to install the binaries and headers
		  in your development machine.

			Building a project to integrate sqlcipher with sqlite plugin
			===========================================================
			Tools necessary:
				Cordova 3.5.xxx (Note: if you’re using Xcode 6 > then you need to use Cordova 4.1.0 or greater)

			These instructions assume that you previously cloned fcids into directory test1010 (project root directory),
			downloaded files, and successfully run buildAll.sh

			1. Navigate to your project root directory
				mkdir test1010

			2. Create the project that you want to add fips storage to:
				cordova create testExample com.t2.testexample testExample
				cd testExample

			3. Add IOS platform and install plugins:
				cordova platform add ios
				cordova plugin add ssh://scoleman@git.t2.local/git/mobile/crossplatform/cordova-plugin-console.git
				cordova plugin add ssh://scoleman@git.t2.local/git/mobile/crossplatform/Cordova-SqlcipherPlugin.git

			4. Update your project with the necessary references
				Open xcode project at: test1010/testExample/platforms/ios/testExample.xcodeproj

				Add the subproject references for sqlcipher (using opt-cmd-a)
					test1010/fcids/sqlcipher/sqlcipher.xcodeproj

				Update "Build Phases" of testExample project 
					In add target dependencies, add sqlcipher
					In Link Binary with Libraries:
						Add libsqlcipher.a
						Remove libsqlite3.dylib
						Add Security.framework

				Update "Build Settings" of testExample project
					add -DSQLITE_HAS_CODEC to "other C flags" (Any architecture, any sdk - both debug and release)
					Add /usr/local/ssl/Release-iphoneos/include to "Header Search Paths" (Any architecture, any sdk - both debug and release)
					Add /usr/local/ssl/Release-iphoneos/libcrypto.a to "Other Linker Flags" (Any architecture, any sdk - both debug and release)

				in xcode co clean then build

					To test to see if everything works you can add the following to your index.js
				        var db = window.sqlitePlugin.openDatabase({name: "myencrypt1.db", password: "password233333"}, onOpenSuccess);
				        
				        db.transaction(function (tx) {
				           tx.executeSql("CREATE TABLE IF NOT EXISTS todo(ID INTEGER PRIMARY KEY ASC, todo TEXT, added_on DATETIME)",
				                         [], onSuccess, onError);
				           tx.executeSql("INSERT INTO todo(todo, added_on) VALUES (?,?)", ['my todo item', new Date()], onSuccess, onError);
				           });
				        
				        function onSuccess(transaction, resultSet) {
				            console.log('Query completed: ' + JSON.stringify(resultSet));
				        }
				        
				        function onError(transaction, error) {
				            console.log('Query failed: ' + error.message);
				        }
				        
				        function onOpenSuccess(resultSet) {
				            console.log('Open Successful');
				            console.log('ssss: ' + JSON.stringify(resultSet));
				            
				            var response = JSON.stringify(resultSet);
				            var parsedJSON = eval('('+response+')');
				            
				            console.log("FIPS Status = " + parsedJSON.FIPSStatus);
				            console.log("T2 FIPS Versions = " + parsedJSON.T2FIPSVersion);
				            
				        }   

			5. Copy the file /usr/local/ssl/Release-iphoneos/lib/fips_premain.c to your root project and include it in build

		    6. In your root project under "build phases" add a "run script" Build phase with the following script:
		    	/usr/local/bin/incore_macho --debug -exe "$CONFIGURATION_BUILD_DIR/$EXECUTABLE_PATH"

			7. When application is complete, create the following FIPS documentation files from templates:
				doc/FIPS140-2ApplicationComplianceStatementTemplate.txt
				doc/FIPS140-2ApplicationComplianceRecordTemplate.txt



********************************
Appendix A - Plugin control flow
********************************
	------------------------------------------------------------------------------
	Control flow example for SQLCipher
	------------------------------------------------------------------------------
	Category      |   Example File       |   Example Code
	------------------------------------------------------------------------------
	JavaScript    |   index.js           |   window.sqlitePlugin.openDatabase()
	              |                      |
	Plugin        |   sqlitePlugin.m     |   -(void)open: (CDVInvokedUrlCommand*)command
	              |                      |
	Native Code   |   sqlite.c           |   sqlite3_create_function()


*************************************************
Appendix B - Description of code and plugins used
*************************************************

	sqlcipher:
		Encrypted sqlite database
			t2.local/git/mobile/crossplatform/sqlcipher.git
			https://github.com/sqlcipher/sqlcipher

	Cordova-SqlitePlugin:
		A Cordova plugin to open and use sqlite databases (android/ios) with HTML5 Web SQL
			git.t2.local/git/mobile/crossplatform/Cordova-SqlcipherPlugin.git
			https://github.com/brodysoft/Cordova-SQLitePlugin

	cordova-plugin-console:
		A Cordova plugin to allow console debugging (so NSLog shows up in output window of xcode)
			git.t2.local/git/mobile/crossplatform/cordova-plugin-console.git
			https://github.com/apache/cordova-plugin-console


******************************************
Appendix C - A note about encryption keys:
******************************************

When initialized with a passphrase SQLCipher derives the key data using PBKDF2 (OpenSSL’s PKCS5_PBKDF2_HMAC_SHA1). Each database is initialized with a unique random salt in the first 16 bytes of the file. This salt is used for key derivation and it ensures that even if two databases are created using the same password, they will not have the same encryption key. The default configuration uses 64000 iterations for key derivation (this can be changed at runtime using “PRAGMA kdf_iter”).

The key used to calculate page HMACs is different that the encryption key. It is derived from the encryption key and using PBKDF2 with 2 iterations and a variation of the random database salt. 

If use of a passphrase is undesirable, an application may provide raw binary key data (for instance to support vaulted keys, or the use of PKI based key exchange).

******************
Appendix D - Potential Issues
******************

	1. if you get an error when trying to run  on simulator:
		cordova needs ios-sim version 3.0 or greater you have version xxx
		Do
			npm install -g ios-sim

			then check version - ios-sim --version

	2. If you get error 755413103 when fips_mode() is called

		You probably forgot steps 5, and 6 in step 3B above.

		
	3. *** Cordova IOS plugin issue *** 
	-------------------------
	    After removing and re-installing a plugin you must go to each source (.m) file of the 
	    module in the plugins directory and make sure (in XCode) the Target membership checkbox is checked.

	    Alternatively, you can to this
	        in XCode goto Build Phases->Compile sources and add each source (.m) file of the plugins just added
	
	4. If your build fails in xcode because it can’t find headers:
	  4a. Make sure that you have installed the release (Step 2A above)
          4b. If you have verified that the release got installed (to /usr/local/ssl/Release-iphoneos) 
              then you probably have a permissions error. Try this:
			chmod 555 -R /usr/local/ssl/Release-iphoneos

	*** Note:         To get finder to show hidden files (Where the FCIDS libraries are installed):
       		 In Terminal, paste the following:  defaults write com.apple.finder AppleShowAllFiles 1


=====================================================================
Unit Tests
=====================================================================
The application fips-pi contains a suite of unit tests that 
test all of the T2Crypto functions .

After running the App the phone display will indicate pass/fail status
and the log will contain detailed information about the tests as well
as pass/fail status.


